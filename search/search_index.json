{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue ! Ce site est con\u00e7u pour les \u00e9l\u00e8ves de STI2D du lyc\u00e9e Jules Verne (Mondeville - Calvados).","title":"Bienvenue !"},{"location":"#bienvenue","text":"Ce site est con\u00e7u pour les \u00e9l\u00e8ves de STI2D du lyc\u00e9e Jules Verne (Mondeville - Calvados).","title":"Bienvenue !"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/","text":"TP. Feux de carrefour Objectif On souhaite simuler le fonctionnement de feux d'un croisement de deux voies (A et B). On \u00e9tudiera ici la mise en oeuvre d'une carte Arduino Uno et de mod\u00e8les r\u00e9duits de feux de carrefour. r\u00e9aliser la maquette \u00e0 partir du sch\u00e9ma \u00e9lectronique, \u00e0 l'aide d'une plaque d'exp\u00e9rimentation ; saisir et comprendre le programme : cr\u00e9er d'autres fonctions que setup et loop ; utiliser l'instrution millis() pour g\u00e9rer les d\u00e9lais. faire \u00e9voluer le programme pour y ajouter un deuxi\u00e8me feu, puis d'autres fonctions. Mat\u00e9riel n\u00e9cessaire une carte Arduino Uno ; une plaque d'exp\u00e9rimentation ; deux feux tricolores ; 8 c\u00e2bles male-male ; un c\u00e2ble USB A ; le logiciel Arduino. Sch\u00e9ma \u00e9lectronique Repr\u00e9sentation du fonctionnement des feux On peut repr\u00e9senter le fonctionnement des feux de carrefour par ce chronogramme . On consid\u00e8re qu'il y a deux voies qui se croisent dans notre carrefour : la voie A et la voie B : Programme et explications Informations g\u00e9n\u00e9rales On d\u00e9crit le programme dans un en-t\u00eate, au d\u00e9but du programme. Cette zone permet d'indiquer quelques informations principales : l'auteur du programme, l'organisme, \u00e9ventuellement la version. Ne n\u00e9gligez pas cette partie ! Cette partie ne sera pas ex\u00e9cut\u00e9e, elle appra\u00eet sous la forme d'un bloc de commentaires. 1 2 3 4 5 /* / Utilisation de la fonction millis() pour g\u00e9rer / les feux de carrefour. / Philippe Morin - Lyc\u00e9e Jules Verne */ D\u00e9finition et d\u00e9claration des constantes On d\u00e9finit quelques noms de constantes pour plus de lisibilit\u00e9. Par exemple, \u00e0 chaque fois que le programme rencontrera l'expression feuRougeVoieA , il la remplacera par la valeur 5 . Ces d\u00e9finitions seront cr\u00e9ees avant compilation, ce ne sont donc pas des instructions. C'est pourquoi ces lilgne ne se terminent pas par un point-virgule. 1 2 3 4 5 #define feuRougeVoieA 5 #define feuOrangeVoieA 4 #define feuVertVoieA 3 unsigned long departCycle ; Noms des variables et constantes Remarquez la forme des noms de ces variables et constantes : chaque mot commence par une majuscule. On aurait pu aussi nommer feu_rouge_voie_a , par exemple. Choisissez un type de nom explicite, et tentez de le conserver. Intitialisation La fonction setup() permet d'initialiser quelques \u00e9l\u00e9ments de notre programme : on indique que les broches utilis\u00e9es seront g\u00e9r\u00e9es en sortie (on envoie un courant) ; on initialise la variable qui indique le temps de d\u00e9part de notre cycle en lui donnant la valeur millis() courante (quelques d\u00e9tails sur la fonction millis() sur cette page ). 1 2 3 4 5 6 7 void setup () { pinMode ( feuRougeVoieA , OUTPUT ); pinMode ( feuOrangeVoieA , OUTPUT ); pinMode ( feuVertVoieA , OUTPUT ); departCycle = millis (); } Fonction principale La fonction principale d'un programme Arduino s'appelle loop() . Toute les instructions comprises dans cette fonction s'ex\u00e9cute les unes apr\u00e8s les autres. \u00c0 la fin de cette fonction, on recommence \u00e0 ex\u00e9cuter les instructions, ceci ind\u00e9finiment. 1 2 3 4 5 6 7 8 9 10 11 12 13 void loop () { // Extinction des feux : digitalWrite ( feuRougeVoieA , LOW ); digitalWrite ( feuOrangeVoieA , LOW ); digitalWrite ( feuVertVoieA , LOW ); // Comparaison du temps pass\u00e9 avec le d\u00e9part du cycle : if ( millis () < ( departCycle + 3000 )) { passageVoieA ();} if (( millis () >= ( departCycle + 3000 )) && ( millis () < ( departCycle + 4000 ))) { transitionVoieA (); } if (( millis () >= ( departCycle + 4000 )) && ( millis () < ( departCycle + 8000 ))) { arretVoieA ();;} if ( millis () > ( departCycle + 8000 )) { departCycle = millis ();} } Que se passe-t-il dans cette fonction ? On \u00e9teint tous les feux. On compare le temps actuel ( millis() ) avec le moment de d\u00e9part du cycle : s'il est inf\u00e9rieur \u00e0 3000, on laisse passer les voitures de la voie A (feu vert) ; s'il est compris entre 3000 et 4000, on pr\u00e9pare la transition de la voie A vers l'arr\u00eat des v\u00e9hicules (feu orange) ; s'il est compris entre 4000 et 8000, on arr\u00eate les voitures de la voie A (feu rouge) ; Si ce temps est sup\u00e9rieur \u00e0 8000, on r\u00e9initialise le d\u00e9part du cycle, puis on recommence. on ne commande pas directement l'extinction et l'allumage des feux directement dans cette fonction, on passe par d'autres fonctions qui en ont la charge ( passageVoieA() , transitionVoieA() , etc ). Ces fonctions sont d\u00e9finies dans la suite du programme : Fonctions d'extinction et d'allumage des feux Elles se placent \u00e0 la suite de la fonction loop() . Par exemple : ```arduino void passageVoieA() { digitalWrite(feuRougeVoieA, LOW); digitalWrite(feuOrangeVoieA, LOW); digitalWrite(feuVertVoieA, HIGH); } ```` Les autres fonctions seront semblables. Programme complet Il est t\u00e9l\u00e9chargeable ici : feu-tricolore-1.ino Travail \u00e0 r\u00e9aliser Vous devez cr\u00e9er ce montage et tester le programme avec un seul feu dans un premier temps. Ensuite vous devez c\u00e2bler un deuxi\u00e8me feu tricolore, qui indiquera le fonctionnement pour les v\u00e9hicules de la voie B. \u00c0 vous de modifier le programme pour y ins\u00e9rer les extinctions et allumages du deuxi\u00e8me feu...","title":"TP. Feux de carrefour"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#tp-feux-de-carrefour","text":"Objectif On souhaite simuler le fonctionnement de feux d'un croisement de deux voies (A et B). On \u00e9tudiera ici la mise en oeuvre d'une carte Arduino Uno et de mod\u00e8les r\u00e9duits de feux de carrefour. r\u00e9aliser la maquette \u00e0 partir du sch\u00e9ma \u00e9lectronique, \u00e0 l'aide d'une plaque d'exp\u00e9rimentation ; saisir et comprendre le programme : cr\u00e9er d'autres fonctions que setup et loop ; utiliser l'instrution millis() pour g\u00e9rer les d\u00e9lais. faire \u00e9voluer le programme pour y ajouter un deuxi\u00e8me feu, puis d'autres fonctions.","title":"TP. Feux de carrefour"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#materiel-necessaire","text":"une carte Arduino Uno ; une plaque d'exp\u00e9rimentation ; deux feux tricolores ; 8 c\u00e2bles male-male ; un c\u00e2ble USB A ; le logiciel Arduino.","title":"Mat\u00e9riel n\u00e9cessaire"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#schema-electronique","text":"","title":"Sch\u00e9ma \u00e9lectronique"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#representation-du-fonctionnement-des-feux","text":"On peut repr\u00e9senter le fonctionnement des feux de carrefour par ce chronogramme . On consid\u00e8re qu'il y a deux voies qui se croisent dans notre carrefour : la voie A et la voie B :","title":"Repr\u00e9sentation du fonctionnement des feux"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#programme-et-explications","text":"","title":"Programme et explications"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#informations-generales","text":"On d\u00e9crit le programme dans un en-t\u00eate, au d\u00e9but du programme. Cette zone permet d'indiquer quelques informations principales : l'auteur du programme, l'organisme, \u00e9ventuellement la version. Ne n\u00e9gligez pas cette partie ! Cette partie ne sera pas ex\u00e9cut\u00e9e, elle appra\u00eet sous la forme d'un bloc de commentaires. 1 2 3 4 5 /* / Utilisation de la fonction millis() pour g\u00e9rer / les feux de carrefour. / Philippe Morin - Lyc\u00e9e Jules Verne */","title":"Informations g\u00e9n\u00e9rales"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#definition-et-declaration-des-constantes","text":"On d\u00e9finit quelques noms de constantes pour plus de lisibilit\u00e9. Par exemple, \u00e0 chaque fois que le programme rencontrera l'expression feuRougeVoieA , il la remplacera par la valeur 5 . Ces d\u00e9finitions seront cr\u00e9ees avant compilation, ce ne sont donc pas des instructions. C'est pourquoi ces lilgne ne se terminent pas par un point-virgule. 1 2 3 4 5 #define feuRougeVoieA 5 #define feuOrangeVoieA 4 #define feuVertVoieA 3 unsigned long departCycle ; Noms des variables et constantes Remarquez la forme des noms de ces variables et constantes : chaque mot commence par une majuscule. On aurait pu aussi nommer feu_rouge_voie_a , par exemple. Choisissez un type de nom explicite, et tentez de le conserver.","title":"D\u00e9finition et d\u00e9claration des constantes"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#intitialisation","text":"La fonction setup() permet d'initialiser quelques \u00e9l\u00e9ments de notre programme : on indique que les broches utilis\u00e9es seront g\u00e9r\u00e9es en sortie (on envoie un courant) ; on initialise la variable qui indique le temps de d\u00e9part de notre cycle en lui donnant la valeur millis() courante (quelques d\u00e9tails sur la fonction millis() sur cette page ). 1 2 3 4 5 6 7 void setup () { pinMode ( feuRougeVoieA , OUTPUT ); pinMode ( feuOrangeVoieA , OUTPUT ); pinMode ( feuVertVoieA , OUTPUT ); departCycle = millis (); }","title":"Intitialisation"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#fonction-principale","text":"La fonction principale d'un programme Arduino s'appelle loop() . Toute les instructions comprises dans cette fonction s'ex\u00e9cute les unes apr\u00e8s les autres. \u00c0 la fin de cette fonction, on recommence \u00e0 ex\u00e9cuter les instructions, ceci ind\u00e9finiment. 1 2 3 4 5 6 7 8 9 10 11 12 13 void loop () { // Extinction des feux : digitalWrite ( feuRougeVoieA , LOW ); digitalWrite ( feuOrangeVoieA , LOW ); digitalWrite ( feuVertVoieA , LOW ); // Comparaison du temps pass\u00e9 avec le d\u00e9part du cycle : if ( millis () < ( departCycle + 3000 )) { passageVoieA ();} if (( millis () >= ( departCycle + 3000 )) && ( millis () < ( departCycle + 4000 ))) { transitionVoieA (); } if (( millis () >= ( departCycle + 4000 )) && ( millis () < ( departCycle + 8000 ))) { arretVoieA ();;} if ( millis () > ( departCycle + 8000 )) { departCycle = millis ();} }","title":"Fonction principale"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#que-se-passe-t-il-dans-cette-fonction","text":"On \u00e9teint tous les feux. On compare le temps actuel ( millis() ) avec le moment de d\u00e9part du cycle : s'il est inf\u00e9rieur \u00e0 3000, on laisse passer les voitures de la voie A (feu vert) ; s'il est compris entre 3000 et 4000, on pr\u00e9pare la transition de la voie A vers l'arr\u00eat des v\u00e9hicules (feu orange) ; s'il est compris entre 4000 et 8000, on arr\u00eate les voitures de la voie A (feu rouge) ; Si ce temps est sup\u00e9rieur \u00e0 8000, on r\u00e9initialise le d\u00e9part du cycle, puis on recommence. on ne commande pas directement l'extinction et l'allumage des feux directement dans cette fonction, on passe par d'autres fonctions qui en ont la charge ( passageVoieA() , transitionVoieA() , etc ). Ces fonctions sont d\u00e9finies dans la suite du programme :","title":"Que se passe-t-il dans cette fonction ?"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#fonctions-dextinction-et-dallumage-des-feux","text":"Elles se placent \u00e0 la suite de la fonction loop() . Par exemple : ```arduino void passageVoieA() { digitalWrite(feuRougeVoieA, LOW); digitalWrite(feuOrangeVoieA, LOW); digitalWrite(feuVertVoieA, HIGH); } ```` Les autres fonctions seront semblables.","title":"Fonctions d'extinction et d'allumage des feux"},{"location":"Travaux%20pratiques/TP-feux-de-carrefour/#programme-complet","text":"Il est t\u00e9l\u00e9chargeable ici : feu-tricolore-1.ino Travail \u00e0 r\u00e9aliser Vous devez cr\u00e9er ce montage et tester le programme avec un seul feu dans un premier temps. Ensuite vous devez c\u00e2bler un deuxi\u00e8me feu tricolore, qui indiquera le fonctionnement pour les v\u00e9hicules de la voie B. \u00c0 vous de modifier le programme pour y ins\u00e9rer les extinctions et allumages du deuxi\u00e8me feu...","title":"Programme complet"},{"location":"Travaux%20pratiques/TP-mesure-temperature-dht22/","text":"TP. Mesure de la temp\u00e9rature avec un capteur DHT22 Objectifs On souhaite dans ce TP mesurer la temp\u00e9rature avec un capteur DHT22. Ce capteur se branche sur une broche num\u00e9rique d'une carte \u00e9lectronique type Arduino ou Esp32... Comment sont envoy\u00e9es les informations d'humidit\u00e9 et de temp\u00e9rature du capteur vers la carte ? Mat\u00e9riel n\u00e9cessaire DHT 22 . Carte \u00e9lectronique type Arduino Uno ou ESP32 . Analyseur logique et son logiciel , \u00e0 t\u00e9l\u00e9charger et \u00e0 installer. C\u00e2blage Programme Le programme en entier : Attention ! Le seul point \u00e0 surveiller est le num\u00e9ro de la broche utilis\u00e9e. Dans ce cas, brocheDHT est la broche 23 (la carte utilis\u00e9e est une ESP32). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \"DHT.h\" // D\u00e9finit la broche de l'Arduino sur laquelle la // broche DATA du capteur est reli\u00e9e #define brocheDHT 23 // Definit le type de capteur utilis\u00e9 #define DHTTYPE DHT22 // D\u00e9clare un objet de type DHT // Il faut passer en param\u00e8tre du constructeur // de l'objet la broche et le type de capteur DHT dht ( brocheDHT , DHTTYPE ); void setup () { Serial . begin ( 9600 ); // Initialise le capteur DHT22 dht . begin (); } void loop () { // R\u00e9cup\u00e8re la temp\u00e9rature et l'humidit\u00e9 du capteur et l'affiche // sur le moniteur s\u00e9rie Serial . println ( \"Temperature = \" + String ( dht . readTemperature ()) + \" \u00b0C\" ); Serial . println ( \"Humidite = \" + String ( dht . readHumidity ()) + \" %\" ); // Attend 10 secondes avant de reboucler delay ( 10000 ); } Les donn\u00e9es sont affich\u00e9es toutes les 10 secondes sur le moniteur s\u00e9rie de votre IDE (Arduino ou Visual Studio Code).","title":"TP. Mesure de la temp\u00e9rature avec un capteur DHT22"},{"location":"Travaux%20pratiques/TP-mesure-temperature-dht22/#tp-mesure-de-la-temperature-avec-un-capteur-dht22","text":"Objectifs On souhaite dans ce TP mesurer la temp\u00e9rature avec un capteur DHT22. Ce capteur se branche sur une broche num\u00e9rique d'une carte \u00e9lectronique type Arduino ou Esp32... Comment sont envoy\u00e9es les informations d'humidit\u00e9 et de temp\u00e9rature du capteur vers la carte ?","title":"TP. Mesure de la temp\u00e9rature avec un capteur DHT22"},{"location":"Travaux%20pratiques/TP-mesure-temperature-dht22/#materiel-necessaire","text":"DHT 22 . Carte \u00e9lectronique type Arduino Uno ou ESP32 . Analyseur logique et son logiciel , \u00e0 t\u00e9l\u00e9charger et \u00e0 installer.","title":"Mat\u00e9riel n\u00e9cessaire"},{"location":"Travaux%20pratiques/TP-mesure-temperature-dht22/#cablage","text":"","title":"C\u00e2blage"},{"location":"Travaux%20pratiques/TP-mesure-temperature-dht22/#programme","text":"Le programme en entier : Attention ! Le seul point \u00e0 surveiller est le num\u00e9ro de la broche utilis\u00e9e. Dans ce cas, brocheDHT est la broche 23 (la carte utilis\u00e9e est une ESP32). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \"DHT.h\" // D\u00e9finit la broche de l'Arduino sur laquelle la // broche DATA du capteur est reli\u00e9e #define brocheDHT 23 // Definit le type de capteur utilis\u00e9 #define DHTTYPE DHT22 // D\u00e9clare un objet de type DHT // Il faut passer en param\u00e8tre du constructeur // de l'objet la broche et le type de capteur DHT dht ( brocheDHT , DHTTYPE ); void setup () { Serial . begin ( 9600 ); // Initialise le capteur DHT22 dht . begin (); } void loop () { // R\u00e9cup\u00e8re la temp\u00e9rature et l'humidit\u00e9 du capteur et l'affiche // sur le moniteur s\u00e9rie Serial . println ( \"Temperature = \" + String ( dht . readTemperature ()) + \" \u00b0C\" ); Serial . println ( \"Humidite = \" + String ( dht . readHumidity ()) + \" %\" ); // Attend 10 secondes avant de reboucler delay ( 10000 ); } Les donn\u00e9es sont affich\u00e9es toutes les 10 secondes sur le moniteur s\u00e9rie de votre IDE (Arduino ou Visual Studio Code).","title":"Programme"},{"location":"Travaux%20pratiques/TP-portail-un-battant/","text":"TP. Portail un battant D\u00e9couverte de la programmation d'une carte Arduino, de ses capteurs (bouton poussoir, barri\u00e8re infra-rouge, t\u00e9l\u00e9commande) et actionneurs (led, servomoteur, buzzer), \u00e0 travers l'utilisation de cette maquette de portail : Cette maquette est commercialis\u00e9e par Technologie Services. Voir lien : lien","title":"TP. Portail un battant"},{"location":"Travaux%20pratiques/TP-portail-un-battant/#tp-portail-un-battant","text":"D\u00e9couverte de la programmation d'une carte Arduino, de ses capteurs (bouton poussoir, barri\u00e8re infra-rouge, t\u00e9l\u00e9commande) et actionneurs (led, servomoteur, buzzer), \u00e0 travers l'utilisation de cette maquette de portail : Cette maquette est commercialis\u00e9e par Technologie Services. Voir lien : lien","title":"TP. Portail un battant"}]}